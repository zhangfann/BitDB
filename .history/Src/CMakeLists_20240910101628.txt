MESSAGE(STATUS "This is CMAKE_CURRENT_SOURCE_DIR dir " ${CMAKE_CURRENT_SOURCE_DIR})

# 添加本目录到头文件目录
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

# 添加源文件
FILE(GLOB_RECURSE ALL_SRC 
    Main.cpp
    HttpServer.cpp 
    Config.cpp
    ClientAuthList.cpp
    Logger.cpp
    # Bitcask
    KV/Bitcask/BitcaskImpl.cpp
    KV/File/PosixFile.cpp
    KV/Util/Arena.cpp
    KV/Util/Coding.cpp
    # MVCC
    # KV/Transaction/LockManager.cpp
    # KV/Transaction/MVCCStorage.cpp
    # KV/Transaction/Storage.cpp
    # KV/Transaction/Txn.cpp
    # KV/Transaction/TxnProcessor.cpp
    # 参考duckdb
    # KV/Transaction/cleanup_state.cpp
    # KV/Transaction/commit_state.cpp
    # KV/Transaction/duck_transaction.cpp
    # KV/Transaction/duck_transaction_manager.cpp
    # KV/Transaction/meta_transaction.cpp
    # KV/Transaction/rollback_state.cpp
    # KV/Transaction/transaction.cpp
    # KV/Transaction/transaction_context.cpp
    # KV/Transaction/transaction_manager.cpp
    # KV/Transaction/undo_buffer.cpp
    # 参考hyrise
    # KV/Transaction/commit_context.cpp
    # KV/Transaction/transaction_context.cpp
    # KV/Transaction/transaction_manager.cpp
    # KV/Transaction/types.cpp
    # KV/Transaction/Storage/base_attribute_vector.hpp
    # KV/Transaction/Storage/chunk.cpp
    # KV/Transaction/Storage/reference_column.cpp
    # KV/Transaction/Storage/storage_manager.cpp
    # KV/Transaction/Storage/table.cpp
    # KV/Transaction/Utils/base_test.cpp

    hyrise/types.cpp 
    hyrise/concurrency/Utils/base_test.cpp
    hyrise/concurrency/commit_context.cpp 
    hyrise/concurrency/transaction_context.cpp 
    hyrise/concurrency/transaction_manager.cpp 
    hyrise/operators/abstract_operator.cpp 
    hyrise/operators/get_table.cpp 
    hyrise/operators/print.cpp 
    hyrise/operators/table_scan.cpp 
    hyrise/storage/chunk.cpp 
    hyrise/storage/reference_column.cpp 
    hyrise/storage/storage_manager.cpp 
    hyrise/storage/table.cpp 
    current_scheduler.hpp
    job_task.cpp
    job_task.hpp
    node_queue_scheduler.cpp
    node_queue_scheduler.hpp
    operator_task.cpp
    operator_task.hpp
    processing_unit.cpp
    processing_unit.hpp
    task_queue.cpp
    task_queue.hpp
    topology.cpp
    topology.hpp
    worker.cpp
    worker.hpp
    abstract_scheduler.cpp
    abstract_scheduler.hpp
    abstract_task.cpp
    abstract_task.hpp
    current_scheduler.cpp
    )
SET(MAIN_SRC Main.cpp)
# 将非Main.cpp文件添加到LIB_SRC中
# 这种类似rust中的lib.rs
FOREACH (F ${ALL_SRC})
    IF (NOT ${F} STREQUAL ${MAIN_SRC})
        LIST(APPEND LIB_SRC ${F})
    ENDIF ()
    MESSAGE("Use " ${F})
ENDFOREACH (F)

# 编译main函数
add_executable(main ${MAIN_SRC})
target_link_libraries(main lib_static)

add_library(lib_static STATIC ${LIB_SRC})
target_link_libraries(lib_static pthread ssl crypto sqlite3 tbb)